generator client {
  provider = "prisma-client-js"
  // output   = "./generated/prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String       @id @default(uuid())
  firstName           String
  lastName            String?
  email               String       @unique
  password            String
  phone               String?      @unique
  role                Role?        @default(ADMIN)
  status              UserStatus   @default(ACTIVE)
  phoneVerified       Boolean      @default(false)
  emailVerified       Boolean      @default(false)
  isActive            Boolean      @default(true)
  profileImageUrl     String?
  lastLogin           DateTime?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  addresses           Address[]
  bills               Bill[]
  cart                CartItem[]
  invitationsSent     Invitation[] @relation("InvitedBy")
  invitationsReceived Invitation[] @relation("InvitedUser")
  orders              Order[]
  ownedWorkspaces     Workspace[]  @relation("OwnedWorkspaces")
  workspaces          Workspace[]  @relation("UserWorkspaces")
}

model Workspace {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  slug            String           @unique
  description     String?
  images          String[]         @default([])
  openingTime     String?
  closingTime     String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  ownerId         String
  categories      Category[]
  invitations     Invitation[]
  orders          Order[]
  products        Product[]
  rolePermissions RolePermission[]
  owner           User             @relation("OwnedWorkspaces", fields: [ownerId], references: [id])
  users           User[]           @relation("UserWorkspaces")
}

model RolePermission {
  id          Int       @id @default(autoincrement())
  workspaceId Int
  role        Role
  permission  String[]
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([workspaceId, role])
}

model Product {
  id          String           @id @default(uuid())
  name        String
  slug        String           @unique
  description String
  images      String[]
  isActive    Boolean          @default(true)
  categoryId  String
  workspaceId Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  category    Category         @relation(fields: [categoryId], references: [id])
  workspace   Workspace        @relation(fields: [workspaceId], references: [id])
  variants    ProductVariant[]
}

model ProductVariant {
  id          String      @id @default(uuid())
  title       String
  sku         String      @unique
  price       Float
  stock       Int
  weight      Float?
  dimensions  String?
  color       String?
  size        String?
  isAvailable Boolean     @default(true)
  productId   String
  billItems   BillItem[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  product     Product     @relation(fields: [productId], references: [id])
}

model Category {
  id          String     @id @default(uuid())
  name        String
  slug        String     @unique
  description String?
  parentId    String?
  workspaceId Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
  products    Product[]
}

model Order {
  id                String        @id @default(uuid())
  userId            String
  shippingAddressId String
  billingAddressId  String
  workspaceId       Int
  paymentMethod     PaymentMethod
  totalAmount       Float
  status            OrderStatus   @default(PENDING)
  notes             String?
  placedAt          DateTime      @default(now())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  billingAddress    Address       @relation("BillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress   Address       @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  user              User          @relation(fields: [userId], references: [id])
  workspace         Workspace     @relation(fields: [workspaceId], references: [id])
  items             OrderItem[]
}

model OrderItem {
  id        String         @id @default(uuid())
  orderId   String
  variantId String
  quantity  Int
  price     Float
  order     Order          @relation(fields: [orderId], references: [id])
  variant   ProductVariant @relation(fields: [variantId], references: [id])
}

model Bill {
  id              String        @id @default(uuid())
  userId          String?
  totalAmount     Float
  paymentMethod   PaymentMethod
  createdManually Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User?         @relation(fields: [userId], references: [id])
  items           BillItem[]
}

model BillItem {
  id        String         @id @default(uuid())
  billId    String
  variantId String
  quantity  Int
  price     Float
  bill      Bill           @relation(fields: [billId], references: [id])
  variant   ProductVariant @relation(fields: [variantId], references: [id])
}

model CartItem {
  id        String         @id @default(uuid())
  userId    String
  variantId String
  quantity  Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id])
  variant   ProductVariant @relation(fields: [variantId], references: [id])
}

model Address {
  id             String   @id @default(uuid())
  userId         String
  address        String
  street         String?
  city           String
  region         String
  postalCode     String
  country        String
  isDefault      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
  billingOrders  Order[]  @relation("BillingAddress")
  shippingOrders Order[]  @relation("ShippingAddress")
}

model Invitation {
  id            Int              @id @default(autoincrement())
  email         String
  tempPassword  String
  inviteToken   String           @unique
  status        InvitationStatus @default(PENDING)
  role          Role
  workspaceId   Int
  invitedById   String
  invitedUserId String?
  createdAt     DateTime         @default(now())
  expiresAt     DateTime
  acceptedAt    DateTime?
  invitedBy     User             @relation("InvitedBy", fields: [invitedById], references: [id])
  invitedUser   User?            @relation("InvitedUser", fields: [invitedUserId], references: [id])
  workspace     Workspace        @relation(fields: [workspaceId], references: [id])
}

enum Role {
  ADMIN
  MANAGER
  STAFF
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DEACTIVATED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}

enum PaymentMethod {
  MPESA
  EMOLA
  CASH
}

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERED
  CANCELLED
}
